{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dev\\\\Web Dev\\\\WikidChart\\\\frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport PageSelector from './components/PageSelector';\nimport AxesSelector from './components/AxesSelector';\nimport About from './components/About';\nimport { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nexport const options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: 'top'\n    },\n    title: {\n      display: false,\n      text: 'Chart title goes here'\n    }\n  }\n};\nvar data;\n\nconst App = () => {\n  _s();\n\n  const [tableData, setTableData] = useState([]);\n  const [showAxesSelector, setShowAxesSelector] = useState(false);\n  const [showChart, setShowChart] = useState(false);\n\n  const setChartData = () => {\n    console.log(tableData); // Get selected x & y axes\n    //const parsedJson = JSON.parse(tableData);\n\n    const marks = tableData.RecordProgression.map(item => item.mark);\n    const labels = tableData.RecordProgression.map(item => item.date);\n    data = {\n      labels,\n      datasets: [{\n        label: 'Data',\n        data: marks,\n        backgroundColor: 'rgba(53, 162, 235, 0.5)'\n      }]\n    };\n    setShowChart(true);\n  };\n  /*  const onClick = (e) => {\n    const activePoints = myChart.getElementsAtEventForMode(e, 'nearest', {\n      intersect: true\n    }, false)\n    const [{\n      index\n    }] = activePoints;\n    console.log(sampleData[[index]);\n  };  */\n  // Get Table\n\n\n  const getTable = async wikiUrl => {\n    const res = await fetch('http://localhost:4000', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(wikiUrl)\n    }); // Get table from response\n\n    const data = await res.json();\n    setTableData(JSON.parse(data));\n    console.log(data); // Get table headers and assign to axes selector\n    // Show axes selection\n\n    setShowAxesSelector(true);\n    setChartData();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        title: \"Wikid Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          element: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(PageSelector, {\n              onGetTable: getTable\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this), showAxesSelector && /*#__PURE__*/_jsxDEV(AxesSelector, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 36\n            }, this), showChart && /*#__PURE__*/_jsxDEV(Bar, {\n              options: options,\n              data: data\n              /* onClick={onClick} */\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/about\",\n          element: About()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"bUV+UOocOZy/yqirErfxq/lfRAE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Dev/Web Dev/WikidChart/frontend/src/App.js"],"names":["Header","Footer","PageSelector","AxesSelector","About","useState","BrowserRouter","Router","Routes","Route","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","Bar","register","options","responsive","plugins","legend","position","title","display","text","data","App","tableData","setTableData","showAxesSelector","setShowAxesSelector","showChart","setShowChart","setChartData","console","log","marks","RecordProgression","map","item","mark","labels","date","datasets","label","backgroundColor","getTable","wikiUrl","res","fetch","method","headers","body","JSON","stringify","json","parse"],"mappings":"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","sourcesContent":["import Header from './components/Header';\nimport Footer from './components/Footer';\nimport PageSelector from './components/PageSelector';\nimport AxesSelector from './components/AxesSelector';\nimport About from './components/About';\nimport { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport const options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: 'top',\n    },\n    title: {\n      display: false,\n      text: 'Chart title goes here',\n    },\n  },\n};\n\n\nvar data;\n\nconst App = () => {\n  const [tableData, setTableData] = useState([]);\n  const [showAxesSelector, setShowAxesSelector] = useState(false);\n  const [showChart, setShowChart] = useState(false);\n\n  const setChartData = () => {\n\n    console.log(tableData);\n    \n    // Get selected x & y axes\n    //const parsedJson = JSON.parse(tableData);\n    const marks = tableData.RecordProgression.map((item) => item.mark);\n    const labels = tableData.RecordProgression.map((item) => item.date);\n\n    data = {\n      labels,\n      datasets: [\n        {\n          label: 'Data',\n          data: marks,\n          backgroundColor: 'rgba(53, 162, 235, 0.5)',\n        }\n      ],\n    };\n\n    setShowChart(true);\n\n  }\n\n\n\n  /*  const onClick = (e) => {\n    const activePoints = myChart.getElementsAtEventForMode(e, 'nearest', {\n      intersect: true\n    }, false)\n    const [{\n      index\n    }] = activePoints;\n    console.log(sampleData[[index]);\n  };  */\n\n  // Get Table\n  const getTable = async (wikiUrl) => {\n    const res = await fetch('http://localhost:4000', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(wikiUrl),\n    })\n\n    // Get table from response\n    const data = await res.json();\n    setTableData(JSON.parse(data));\n\n    console.log(data);\n\n    // Get table headers and assign to axes selector\n\n    // Show axes selection\n    setShowAxesSelector(true);\n\n    setChartData();\n  }\n\n\n  return (\n    <Router>\n      <div className='App'>\n        <Header title='Wikid Chart' />\n        <Routes>\n          <Route path='/' exact element={(\n            <>\n              <PageSelector onGetTable={getTable} />\n              {showAxesSelector && <AxesSelector />}\n              {showChart && <Bar options={options} data={data} /* onClick={onClick} */ />}\n            </>\n          )} />\n          <Route path='/about' element={About()} />\n        </Routes>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}